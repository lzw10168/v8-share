import numpy as np
import re
from skimage.color import rgb2lab
from scipy.spatial.distance import euclidean
color_list = [
  'rgba(0,0,0,0.3)',
  'rgba(9, 132, 159, 0.15)',
  '#000',
  'rgba(0, 0, 0, 0.2)',
  'rgba(0,6,13,1)',
  'rgba(153,153,153,1)',
  'rgba(245,247,249, 1)',
  'rgba(9,132,159, 1)',
  'rgba(0,0,0,1)',
  'rgba(9,132,159, 0.15)',
  'rgba(102,102,102,1)',
  'rgba(9,132,159,0.15)',
  'rgba(76, 175, 81, 0.2)',
  'rgba(9, 132, 159, 0.05)',
  'rgb(9, 132, 159)',
  'rgba(9,132,159,0.7)',
  'rgba(0, 0, 0, 0.12)',
  'rgba(0,0,0, 0.2)',
  'rgb(153, 153, 153)',
  'rgb(244, 68, 54)',
  'rgb(14, 14, 14)',
  'rgba(0, 0, 0, 0.38)',
  'rgb(245,82,68)',
  'rgb(9,132,159)',
  'rgba(255,248,225, 1)',
  'rgba(240,240,240, 1)',
  'rgba(220,220,220, 1)',
  'rgba(153,153,153, 1)',
  'rgba(0,0,0, 0.15)',
  'rgba(0, 0, 0, 0.26)',
  'rgba(9,132,159,1)',
  'rgb(245, 247, 249)',
  'rgba(25, 118, 210, 0.08)',
  'rgb(102, 102, 102)',
  'rgb(220, 220, 220)',
  'rgba(0, 0, 0, 0.15)',
  'rgba(240, 240, 240, 0)',
  '#000000',
  'rgba(10, 148, 179, 0.15)',
  'rgba(0, 0, 0, 0.87)',
  'rgba(9, 132, 159, 0.04)',
  'rgba(9, 132, 159, 1)',
  'rgba(245,247,249,1)',
  'rgba(51,51,51,0.7)',
  'rgba(0,0,0,0.15)',
  'rgba(0, 0, 0, 0.1)',
  'rgba(0, 0, 0, 0.45)',
  'rgba(0, 0, 0, 0.23)',
  'rgba(0, 0, 0, 0.54)',
  'rgba(153,153,153,0.5000)',
  'rgba(228, 228, 228, 1)',
  'rgba(9,132,159, 0.05)',
  'rgba(149, 157, 165, 0.2)',
  'rgb(1, 4, 9)',
  'rgba(0,0,0,0.54)',
  'rgba(0, 0, 0, 0.04)',
  'rgb(123, 135, 150)',
  'rgba(255, 255, 255, 0.85)',
  'rgba(9, 132, 159, 0.1)',
  'rgba(255,255,255, 1)',
  'rgba(150,150,150, 0.7)',
  'rgba(0, 0, 0, 0.5)',
  'rgba(0,0,0,0.2)',
  'rgba(9,132,159,0.05)',
  'rgba(0, 0, 0, 0.25)',
  'rgba(0, 0, 0, 0.3)',
  'rgb(254, 115, 104)',
  'rgba(250, 250, 250, 1)',
  'rgba(0, 0, 0, 0.4)',
  'rgb(236, 236, 236)',
  'rgba(0, 0, 0, 0.14)',
  'rgb(175, 180, 189)',
  'rgb(117, 127, 154)',
  'rgba(13,10,49,0.9)',
  'rgba(0, 6, 13, 0.2)',
  'rgba(153, 153, 153, 1)',
  'rgba(9, 132, 159)',
  'rgb(186, 206, 216)',
  'rgba(0,0,0,0.12)',
  'rgba(9, 132, 159, 0.5)',
  'rgb(0, 6, 13)',
  'rgb(247, 153, 33)',
  'rgba(212,212,212, 1)',
  'rgba(10,148,179, 0.05)',
  'rgba(0,0,0,0.38)',
  'rgb(240, 240, 240)',
  'rgb(153,153,153)',
  'rgb(0, 0, 0)',
  'rgba(9, 132, 159, 0.25)',
  'rgba(113, 147, 165, 0.3)',
  'rgb(245,247,249)',
  'rgb(203, 231, 250, 0.315)',
  'rgba(216, 216, 216, 1)',
  'rgba(0, 0, 0, 0.6)',
  'rgba(220, 220, 220, 1)',
  'rgb(26, 141, 165)',
  'rgb(26, 141, 165, 0.15)',
  'rgba(9,132,159,0.1500)',
  'rgba(9,132,159,0.0500)',
  'rgba(9, 132, 159, 0.2)',
  'rgba(0, 0, 0, 0.08)',
  'rgba(0, 0, 0, 0.85)',
  'rgba(255,255,255,0)',
  'rgba(228, 231, 238, 0.2)',
  'rgba(97, 97, 97, 0.92)',
  'rgba(255, 255, 255, 0.5)',
  'rgb(229, 246, 253)',
  'rgba(0,0,0,0.1500)',
  'rgba(51,51,51,0.8)',
  'rgba(105, 105, 105, 0.2)',
  'rgba(0,0,0,0.5)',
  'rgba(9, 132, 159, 0.8)',
  'rgba(224, 224, 224, 1)',
  'rgba(0,0,0,0.0300)',
  'rgba(212, 211, 211, 0.5)',
  'rgba(0, 6, 13, 0.1)',
  'rgba(0, 255, 255, 0)',
  'rgba(0, 0, 0, 0.55)',
  'rgb(233,241,244)',
  'rgba(186, 205, 216, 1)',
  'rgb(51, 51, 51)',
  'rgb(255, 241, 223)',
  'rgba(0, 0, 0, 0.02)',
  'rgb(122, 193, 254)',
  'rgb(253, 236, 234)',
  'rgb(221, 234, 239)',
  'rgb(76, 175, 81)',
  'rgb(249, 103, 49)',
  'rgba(0,0,0)',
  'rgb(233, 241, 244)',
  'rgba(11,132,159, 1)',
  '#060606',
  '#00060D',
  '#0E0E0E',
  '#141516',
  '#1c1c1c',
  '#212121',
  '#1c2128',
  '#262626',
  '#24292e',
  '#322a28',
  '#0C2947',
  '#1f313d',
  '#333',
  '#30363d',
  '#143651',
  '#0a0167',
  '#3C3F42',
  '#034654',
  '#3b3f45',
  '#404040',
  '#434343',
  '#444444',
  '#484949',
  '#4D4D4D',
  '#3C3B6E',
  '#515151',
  '#065c6f',
  '#555',
  '#525659',
  '#495463',
  '#565657',
  '#575656',
  '#595959',
  '#009f00',
  '#415c71',
  '#666',
  '#666666',
  '#676767',
  '#30B122',
  '#6c6c6d',
  '#B22234',
  '#6d6d6d',
  '#bc0927',
  '#757575',
  '#B54641',
  '#48AD54',
  '#09839f',
  '#09849F',
  '#09849f',
  '#0B849F',
  '#4CAF51',
  '#4caf51',
  '#0285a0',
  '#00ac76',
  '#6a7985',
  '#7c7c7c',
  '#7b7c7d',
  '#158aa4',
  '#4E74A6',
  '#1A8CA5',
  '#d81e06',
  '#1b5bc5',
  '#D52B1E',
  '#d32f2f',
  '#7e8182',
  '#7f8384',
  '#C45352',
  '#d45601',
  '#0A94B3',
  '#888',
  '#1874CD',
  '#8C8C8C',
  '#26C886',
  '#00b6ad',
  '#5189c6',
  '#5189C6',
  '#1ecd97',
  '#d78c00',
  '#ff001d',
  '#FF001D',
  '#f44336',
  '#F44436',
  '#f44436',
  '#10A6C7',
  '#969696',
  '#979797',
  '#F34646',
  '#e28900',
  '#94999d',
  '#53a8bb',
  '#999',
  '#999999',
  '#DE705D',
  '#EC732A',
  '#9a9a9a',
  '#81A2A9',
  '#2E71EF',
  '#47D199',
  '#f35a4e',
  '#3498db',
  '#2B80ED',
  '#2b80ed',
  '#F75252',
  '#9d9e9e',
  '#9E9E9E',
  '#9e9e9e',
  '#9d9e9f',
  '#00A1DF',
  '#00BACB',
  '#97a1a6',
  '#F06D54',
  '#308fe8',
  '#6F6DE8',
  '#6f6de8',
  '#EF8044',
  '#e1a800',
  '#784af4',
  '#3488F4',
  '#FF6C40',
  '#ff6c40',
  '#47B5D1',
  '#A6A6A6',
  '#4AAADE',
  '#8DACBA',
  '#f7961d',
  '#12BADF',
  '#A8A8A8',
  '#f79a1b',
  '#6bccb4',
  '#F79921',
  '#f79921',
  '#96a9ba',
  '#a6a9ad',
  '#1890ff',
  '#1a90ff',
  '#eb7e7f',
  '#4dd2c3',
  '#4DD2C3',
  '#4ED2C3',
  '#4ed2c3',
  '#6495ED',
  '#2CAEEE',
  '#39a3f4',
  '#EA9471',
  '#826AF9',
  '#FF9F0A',
  '#ff9f0a',
  '#4094ff',
  '#4094FF',
  '#79D0B6',
  '#BB8CBF',
  '#ffa112',
  '#F9A825',
  '#b3adad',
  '#a2acbe',
  '#aeb0b1',
  '#faad14',
  '#7fbdcc',
  '#F2A950',
  '#F7B500',
  '#f7b500',
  '#F7A552',
  '#52A5F7',
  '#afb3b6',
  '#ffa737',
  '#FFA737',
  '#c778ce',
  '#F3C303',
  '#FFAB40',
  '#F5C500',
  '#cab69e',
  '#b5b6b7',
  '#EDAB7C',
  '#b6b7b9',
  '#EA1AD6',
  '#aeb8c2',
  '#FBC02D',
  '#BCB8B8',
  '#5FB1FE',
  '#A1C0D1',
  '#FFCC00',
  '#ECBC80',
  '#97C9D5',
  '#BFBFBF',
  '#fed60a',
  '#FED60A',
  '#FEB870',
  '#FFD142',
  '#bbc7c8',
  '#f4ea2a',
  '#FAC974',
  '#bfccd2',
  '#a6d0e3',
  '#BACED8',
  '#baced8',
  '#FFEF31',
  '#ccc',
  '#CCCCCC',
  '#87CEFF',
  '#BDDCCF',
  '#BCDCD0',
  '#bcdcd0',
  '#CECECE',
  '#F2D996',
  '#ACDCE4',
  '#c9d1d9',
  '#C0D4DF',
  '#c2d4de',
  '#bad9e3',
  '#BAD9E3',
  '#D4D4D4',
  '#d4d4d4',
  '#c7dae0',
  '#D8D8D8',
  '#e1d2d6',
  '#C7E1E7',
  '#cedee6',
  '#CBEADD',
  '#DCDCDC',
  '#dcdcdc',
  '#dadcde',
  '#ddd',
  '#CAE1ED',
  '#e0e0e0',
  '#E0E0E0',
  '#dce0e6',
  '#d1e6eb',
  '#D1E6EB',
  '#D1E5EC',
  '#E1E1E1',
  '#D2E6EB',
  '#d1e6ec',
  '#d2e6ec',
  '#E2E2E2',
  '#D5E8EC',
  '#E4E4E4',
  '#e1e4e8',
  '#cbe7fa',
  '#CBE7FA',
  '#DAE7EE',
  '#E6E6E6',
  '#e6e6e6',
  '#e5e6e7',
  '#dae9ef',
  '#EFEAD9',
  '#efead9',
  '#F2DFE2',
  '#efebda',
  '#DAE8F2',
  '#e6e7e8',
  '#d1edf6',
  '#f7dfdf',
  '#DDEAEF',
  '#F2E2E5',
  '#f2e2e5',
  '#DFF2EB',
  '#E9EAEB',
  '#dcf1f1',
  '#F2EEDF',
  '#DEF0F5',
  '#ECECEC',
  '#EAECEE',
  '#eaecef',
  '#ebedef',
  '#E9F6E9',
  '#EEEEEE',
  '#eee',
  '#def2fc',
  '#edeff1',
  '#E8F1F4',
  '#e8f1f4',
  '#edf0f1',
  '#EDF0F1',
  '#E9F1F4',
  '#e9f1f4',
  '#eef0f1',
  '#ECF0F3',
  '#F0F0F0',
  '#f0f0f0',
  '#E4F3FA',
  '#E3F2FD',
  '#f2f2f2',
  '#F2F2F2',
  '#f1f2f3',
  '#F0F2F4',
  '#f0f2f4',
  '#fffed8',
  '#e6f2ff',
  '#FFEBEE',
  '#f5f5f5',
  '#f5f5f7',
  '#F5F7F9',
  '#f5f7f9',
  '#f2f8ff',
  '#f9f9f9',
  '#FAFAFA',
  '#FAFBFC',
  '#FDFDFD',
  '#fff',
  '#FFFFFF',
  '#ffffff',
  '#FFF',
]

def color_to_array(color):
    if '#' in color:
        # Convert hex color to RGB
        color = re.sub(r'[#]', '', color)
        if len(color) == 3:
            color = ''.join([char*2 for char in color])
        components = [int(color[i:i+2], 16) for i in (0, 2, 4)]
        components.append(1.0)  # Add alpha channel, assuming fully opaque
    else:
        # Convert RGBA color to array
        color = color.replace("rgba", "").replace("rgb", "").replace("(", "").replace(")", "").replace(" ", "")
        components = list(map(float, color.split(',')))

    return np.array(components)

def rgb_to_lab(color):
    color = color_to_array(color)
    color_rgb = color[:3] / 255.0
    color_rgb = np.clip(color_rgb, 0, 1)  # Ensure values are in the valid range
    color_lab = rgb2lab(color_rgb.reshape(1, 1, 3))
    return color_lab[0, 0, :]

def lab_distance(color1, color2):
    lab1 = rgb_to_lab(color1)
    lab2 = rgb_to_lab(color2)
    return euclidean(lab1, lab2)


sorted_color_list = sorted(color_list, key=lambda x: lab_distance(x, '#000'))

for color in sorted_color_list:
    print(color)

# 输出排序后的颜色列表, js文件 . 文件内容 const colorList = [ ... ]
print('const colorList = [')
for color in sorted_color_list:
    print(f'    "{color}",')
print(']')
# 写入文件
with open('colorList.js', 'w') as f:
    f.write('const colorList = [\n')
    for color in sorted_color_list:
        f.write(f'    "{color}",\n')
    f.write(']')



# for color in sorted_color_list:
#     print(color)

  